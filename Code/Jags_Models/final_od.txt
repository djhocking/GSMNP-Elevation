
    model{
    # Priors
    alpha.lam ~ dnorm(0, 0.01)
    beta1.lam ~ dnorm(0, 0.01)
    beta2.lam ~ dnorm(0, 0.01)
    beta3.lam ~ dnorm(0, 0.01)
    beta4.lam ~ dnorm(0, 0.01)
    beta5.lam ~ dnorm(0, 0.01)
    beta6.lam ~ dnorm(0, 0.01)
    
    for(i in 1:n.sites){
    eps.lam[i] ~ dnorm(0, 1)
    }
    
    sigma.site ~ dt(0, 1 / (25^2), 1)I(0, ) 	## implies half-cauchy with scale of 25
    # tau.site <- 1/(sigma.site*sigma.site)
    
    alpha.p ~ dnorm(0, 0.01)
    beta1.p ~ dnorm(0, 0.01)
    beta2.p ~ dnorm(0, 0.01)
    beta3.p ~ dnorm(0, 0.01)
    beta4.p ~ dnorm(0, 0.01)
    beta5.p ~ dnorm(0, 0.01)
    beta10.p ~ dnorm(0, 0.01)
    
# Z.lam ~ dnorm(0, 1)
# Z.p ~ dnorm(0, 1)

    sigma.p ~ dt(0, 1 / (25^2), 1)I(0, ) 	## implies half-cauchy with scale of 25
    # tau.p <- pow(sigma.p, -2)
    
    for(i in 1:n.transects){
    for(j in 1:n.surveys){
    delta.p[i,j] ~ dnorm(0, 1)
    }
    }
    
    # Likelihood
    for(i in 1:n.transects){
    N[i] ~ dpois(lambda[i])
    
    log(lambda[i]) <- alpha.lam + beta1.lam*elev[i] + beta2.lam*elev2[i] + beta3.lam*twi[i] + beta4.lam*litterdepth[i] + beta5.lam*gcover[i] + beta6.lam*stream[i] + sigma.site * eps.lam[site[i]]
    
    for(j in 1:n.surveys){
    C[i, j] ~ dbin(p[i, j], N[i])
    p[i,j] <- 1 / (1 + exp(-lp.lim[i,j]))    
    lp.lim[i,j] <- min(999, max(-999, lp[i,j])) # Help stabilize the logit
    
    lp[i, j] <-  alpha.p + beta1.p*Temp.s[i,j] + beta2.p*Temp.s2[i,j] + beta3.p*Precip.s[i,j] + beta4.p*gcover[i] + beta5.p*gcover2[i] + beta10.p*RH.s[i,j] + sigma.p * delta.p[i,j]
    
    # Assess model fit using Chi-squared discrepancy
    # Compute fit statistic for observed data
    eval[i,j] <- p[i,j] * N[i]
    E[i,j] <- pow((C[i,j] - eval[i,j]),2) / (eval[i,j] + 0.5)
    # Generate replicate data and compute fit stats for them
    y.new[i,j] ~ dbin(p[i,j], N[i])
    E.new[i,j] <- pow((y.new[i,j] - eval[i,j]),2) / (eval[i,j] + 0.5) 
    
    diff.cy[i,j] <- C[i,j] - y.new[i,j]
    }
    }
    
    # Derived quantities
    totalN<- sum(N[1:n.transects])
    fit <- sum(E[1:n.transects, 1:n.surveys])
    fit.new <- sum(E.new[1:n.transects, 1:n.surveys])
    
    }
    
